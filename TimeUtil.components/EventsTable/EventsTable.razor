@using TimeUtil.Shared
@using TimeUtil.Shared.Interfaces

@inject IDialogService DialogService
@inject IOutlookCalendarCSVParseService Parser

<MudSimpleTable Hover="true" Striped="true" Dense="true" Elevation="0" Outlined="true">
    <thead>
        <tr>
            <th>
                Event Subject
            </th>
            <th>
                Start Date
            </th>
            <th>
                End Date
            </th>
            <th>
                Event duration
            </th>
            <th>
                Event Categories
            </th>
            <th aria-hidden="true"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var row in _events)
        {
            <tr>
                <td>
                    @row.EventSubject
                </td>
                <td>
                    @row.FullStartDateTime
                </td>
                <td>
                    @row.FullEndDateTime
                </td>
                <td>
                    @row.Eventduration
                </td>
                <td>
                    <ul>
                        @foreach (string category in row.Categories)
                        {
                            <li @key="category">
                                @category
                            </li>
                        }
                    </ul>
                </td>
                <td>
                    <MudIconButton Icon="@Icons.Filled.Edit" aria-label="edit" Size="@Size.Small" OnClick="() => OpenEditDialog(row)" />
                </td>
            </tr>
        }
    </tbody>
</MudSimpleTable>
<MudBreakpointProvider>
    <MudHidden Invert="true" Breakpoint="Breakpoint.MdAndUp">
        <MudStack Row="true" Class="mt-3 align-center" Style="width:fit-content; margin-left:auto;" Spacing="3">
            <MudSelect T="int" Label="Rows per page" FullWidth="false" @bind-Value="PageSize">
                @foreach (int option in pageSizeOptions)
                {
                    <MudSelectItem Value="@option" />
                }
            </MudSelect>
            <div style="text-align:center;">
                <StyledText HtmlTag="span" Typo="Typo.body1">
                    @LowerBoundItem - @UpBoundItem of @Events.Events.Count
                </StyledText>
            </div>
            <MudPagination @bind-Selected="CurrentPage" Count="_numberOfPages" BoundaryCount="0" Class="pa-4"  MiddleCount="0" />
        </MudStack>
    </MudHidden>
    <MudHidden Invert="true" Breakpoint="Breakpoint.SmAndDown">
        <MudGrid Class="align-center mt-1" Justify="Justify.FlexEnd">
            <MudItem xs="12" sm="6">
                <MudSelect T="int" Label="Rows per page" FullWidth="false" @bind-Value="PageSize">
                    @foreach (int option in pageSizeOptions)
                    {
                        <MudSelectItem Value="@option" />
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" Style="text-align:center;">
                <StyledText HtmlTag="span" Typo="Typo.body1">
                    @LowerBoundItem - @UpBoundItem of @Events.Events.Count
                </StyledText>
            </MudItem>
            <MudItem Class="align-end" xs="12">
                <MudPagination @bind-Selected="CurrentPage" Count="_numberOfPages" BoundaryCount="0" Class="pa-4"  MiddleCount="0" />
            </MudItem>
        </MudGrid>
    </MudHidden>
</MudBreakpointProvider>



@code {
    [Parameter, EditorRequired] public EventsTableData Events { get; set; } = default!;
    [Parameter, EditorRequired] public IEnumerable<string> Categories { get; set; } = default!;

    private Event[] _events = default!;
    private static readonly int[] pageSizeOptions = new[] { 20, 40, 60, 80, 100 };
    private int _pageSize = pageSizeOptions[0];
    private int _numberOfPages;

    private int _currentPage = 1;

    private int PageSize
    {
        get => _pageSize;
        set
        {
            _pageSize = value;
            _numberOfPages = GetNumberOfPages();
            _events = GetPageOfEvents();
        }
    }

    private int CurrentPage
    {
        get => _currentPage;
        set
        {
            _currentPage = value;
            _events = GetPageOfEvents();
        }
    }

    private int LowerBoundItem => ((_currentPage - 1) * _pageSize) + 1;
    private int UpBoundItem => _events.Length < _pageSize ? Events.Events.Count : _events.Length * _currentPage;

    protected override void OnParametersSet()
    {
        _events = GetPageOfEvents();
        _numberOfPages = GetNumberOfPages();
    }

    private int GetNumberOfPages()
    {
        return (int)Math.Ceiling((double)Events.Events.Count / _pageSize);
    }

    private Event[] GetPageOfEvents()
    {
        return Events.Events.Skip((_currentPage - 1) * _pageSize).Take(_pageSize).ToArray();
    }

    private async Task OpenEditDialog(Event eventToUpdate)
    {

        DialogParameters parameters = new()
        {
            { nameof(EditEventDialog.Event), eventToUpdate },
            { nameof(EditEventDialog.Categories), Categories }
        };

        var reference = DialogService.Show<EditEventDialog>("Simple Dialog", parameters);

        var res = await reference.Result;

        if (res.TryGetSuccessfulResult(out IEnumerable<string>? categories))
        {
            eventToUpdate.UpdateEvent(categories.ToArray());
        }
    }
}
